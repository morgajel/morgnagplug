#!/usr/bin/perl 
#
# check_soap a nagios check plugin for webservices
#
# Copyright (C) 2010 Jesse Morgan
#
# check_soap
# This file is part of morgnagplug
#
# check_soap is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# check_soap is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


use strict;
use Data::Dumper;
use Nagios::Plugin;
use Nagios::Plugin::Threshold;
use LWP::UserAgent;
use HTTP::Request::Common;
use Time::HiRes;


my $np = Nagios::Plugin->new(  
    usage => "Usage: %s -u <url> [-m <striddng>] [-n <string>] [-p <filename>] [-w <float>] [-c <float>] [--ignore-faults] ",
    version => '1.0',
    blurb   => 'a check for soap services',
    url     => 'https://morgnagplug.svn.sourceforge.net/',
    license => 'GPL 2',
    timeout => 15, # default value explictly defined
);


################
# define flags #
################
$np->add_arg(
        'spec' => "url|u=s",
        'help' => "URL of SOAP service",
        'required' => 1,
   );
$np->add_arg(
        'spec' => "match|m=s@",
        'help' => "Succeeds if string is matched via regex",
   );
$np->add_arg(
        'spec' => "nomatch|n=s@",
        'help' => "Fails if string is matched via regex",
   );
$np->add_arg(
        'spec' => "post|p=s",
        'help' => "File containing post data",
   );
$np->add_arg(
        'spec' => "warning|w=s",
        'help' => "Minimum response time to WARN in seconds (default: 8)",
        'default' =>8,
   );
$np->add_arg(
        'spec' => "critical|c=s",
        'help' => "Minimum response time to CRIT in seconds (default: 10)",
        'default' =>10,
   );
$np->add_arg(
        'spec' => "ignorefaults",
        'help' => "Do not fail on Fault",
        'default' =>0,
   );
$np->getopts;
alarm $np->opts->timeout;




###########################
# parameter sanity checks #
###########################
if ($np->opts->url !~ /https?:\/\/.*/ ){
    $np->nagios_exit(UNKNOWN, "Bad URL: ".$np->opts->url." didn't meet a simple regex rule");
}elsif (defined $np->opts->post and ( ! -e $np->opts->post or ! -r $np->opts->post) ){
    $np->nagios_exit(UNKNOWN, "Bad POST file: ".$np->opts->post." doesn't exist or is unreadable");
}elsif (defined $np->opts->critical and $np->opts->critical !~ /^[0-9]+(.[0-9]+)?$/ ){
    $np->nagios_exit(UNKNOWN, "Bad Critical value: ".$np->opts->critical." should be a numeric value!");
}elsif (defined $np->opts->warning and $np->opts->warning !~ /^[0-9]+(.[0-9]+)?$/ ){
    $np->nagios_exit(UNKNOWN, "Bad Warning value: ".$np->opts->warning." should be a numeric value!");
}elsif (defined $np->opts->warning and defined $np->opts->critical and $np->opts->warning >=$np->opts->critical ){
    $np->nagios_exit(UNKNOWN, "Bad Warning value: ".$np->opts->warning." should be less than crit (".$np->opts->critical.")");
}


#################################
# Load Data to POST (if needed) #
#################################
my ($httpmethod, $postdata);
if (defined $np->opts->post){
    $httpmethod='POST';
    open POSTDATA, $np->opts->post or $np->nagios_exit(UNKNOWN, "Bad POST file: ".$np->opts->post." won't open for reading!");
    $postdata=join '\n', <POSTDATA>;
    close POSTDATA;
}


##############################
# Actual SOAP call goes here #
##############################


my $userAgent = LWP::UserAgent->new(agent => $np->shortname);
$userAgent->timeout($np->opts->critical+1);
my $response;
my $starttime=[ Time::HiRes::gettimeofday( ) ];

if ($httpmethod eq "POST"){
    print "Posting..." if ($np->opts->verbose);
    $response = $userAgent->post($np->opts->url,
        'Content_Type'      => 'text/xml;charset=UTF-8',
        'Accept-Encoding'   => 'gzip,deflate',
        'SOAPAction'        =>  "",
        'Content'           => $postdata
    );
}else{
    print "Getting..." if ($np->opts->verbose);
    $response = $userAgent->get( $np->opts->url,
        'Content_Type'      => 'text/xml;charset=UTF-8',
        'Accept-Encoding'   => 'gzip,deflate',
        'SOAPAction'        =>  "",
    );
}
my $elapsedtime = Time::HiRes::tv_interval( $starttime );
my $threshold = Nagios::Plugin::Threshold->set_thresholds(
        warning  => $np->opts->warning,
        critical => $np->opts->critical,
    );
$np->add_perfdata( label => "response time", value => $elapsedtime, uom => " seconds", threshold =>  $threshold );



if ($np->opts->verbose ==3){
    print Dumper $response;
    print "$elapsedtime seconds\n";
}


###################
# Process Results #
###################


# Check for Soap Faults
if ($np->opts->ignorefaults == 0 and $response->content =~ /(<[^<]*\:Fault[^>]*>.*<\/[^<]*\:Fault[^>]*>)/s ){
    my $error=$1;
    $np->nagios_exit(CRITICAL, "Fault: Soap failed with the following: $error");
}

#check for 4xx or 5xx errors
if ( $response->code >=400 ){
    $np->nagios_exit(CRITICAL, "code ".$response->code .": ".$response->message);
}
# ensure all requested matches match
if (defined $np->opts->match){
    foreach my $match (@{$np->opts->match}){
        if ($response->content !~/$match/){
            $np->nagios_exit(CRITICAL, "Match not found: '$match' was not matched to content");
        }
    }
}
# ensure all requested nomatches do not match
if (defined $np->opts->nomatch){
    foreach my $nomatch (@{$np->opts->nomatch}){
        if ($response->content =~/$nomatch/){
            $np->nagios_exit(CRITICAL, "Match found: '$nomatch' should not be matched to content");
        }
    }
}
# If it took longer than CRIT
if ($elapsedtime >= $np->opts->critical){
    $np->nagios_exit(CRITICAL, "Timeout exceeded: it took $elapsedtime second(s); should be under ".$np->opts->critical);
}
# If it took longer than WARN
if ($elapsedtime >= $np->opts->warning){
    $np->nagios_exit(WARNING, "Timeout exceeded: it took $elapsedtime second(s); should be under ".$np->opts->warning);
}


#gauntlet complete!
$np->nagios_exit(OK, "Success");

#The End
