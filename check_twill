#!/usr/bin/python
#
# check_twill a monitoring plugin for stepping through a website
#
# check_twill Copyright (C) 2015
# BASED ON  check_twill, Copyright 2009 Jesse Morgan, Michael Isiminger
# BASED ON: check_twill, Copyright 2006 Duncan McGreggor
#
# check_twill
# This file is part of the morgnagplug package.
# 
# 
# The MIT License
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

prog_version = "1.3"

import cmd

import argparse
import sys, os

import logging
_log = logging.getLogger('nagiosplugin')

from datetime import datetime
import nagiosplugin
from twill import commands, parse, __version__, namespaces, TwillCommandLoop, set_output, set_errout
from twill.errors import TwillAssertionError, TwillNameError
# This plugin has three parts:
# - Resource Collection
# - Context Comparison
# - Summarization
from cStringIO import StringIO









NAGIOS_OK = 0
NAGIOS_WARN = 1
NAGIOS_CRIT = 2
NAGIOS_UNKN = 3


def _execute_script(inp, **kw):
    """
    Execute lines taken from a file-like iterator.
    """
    # initialize new local dictionary & get global + current local
    namespaces.new_local_dict()
    globals_dict, locals_dict = namespaces.get_twill_glocals()

    # sourceinfo stuff
    sourceinfo = kw.get('source', "<input>")
    # should we catch exceptions on failure?
    catch_errors = False
    if kw.get('never_fail'):
        catch_errors = True
    try:
        n = 0
        cmdlist = []
        target=''
        for line in inp:
            n += 1

            if not line.strip():            # skip empty lines
                continue
     
            cmd, args = parse.parse_command(line, globals_dict, locals_dict)
            if cmd is None:
                continue 

            cmdinfo = "%s:%d" % (sourceinfo, n,)

            try:
                cmdlist.append( '%s: %s %s' %(n,cmd,''.join( args)))
                result= parse.execute_command(cmd, args, globals_dict, locals_dict, cmdinfo)
                if result is not None:
                    target= result
            except SystemExit:
                # abort script execution, if a SystemExit is raised.
                return
            except Exception, e:
                # catching ALL exceptions, not just Twill exceptions because a connection 
                #  refused would break the script
                # I feel dirty about using a global here but I haven't figured out a better way
                #  yet
                global error_msg 
                error_msg = "[%s] on line %s of %s at %s " %(e,n,sourceinfo,target) 
                if not catch_errors:
                    #raise
                    raise TwillAssertionError(error_msg)

    finally:
        namespaces.pop_local_dict()

parse._execute_script = _execute_script



class TwillResource(nagiosplugin.Resource):
    """ This is where all of the heavy lifting happens.
    """

    def __init__(self,args):
        """ passing in args like this is ugly, but it works for testing.
        """
        self.args = args

    def probe(self):
        startTime = datetime.now()
        errormessage=StringIO()
        output=StringIO()
        try:
            if not self.args.debug:
                set_output(output)
                set_errout(errormessage)
            # Call twill.parser's execute file, which *should* call our _execute_file above.
            parse.execute_file(self.args.script, never_fail=self.args.never_fail)
            # Return outputs to normal
            set_output(None)
            set_errout(None)
        except nagiosplugin.error.Timeout, e :
            raise nagiosplugin.CheckError("Script didn't finish in time: {0}".format(e))
        except TwillAssertionError,e:
            raise nagiosplugin.CheckError("Assertion Failure: {0}".format(e))
            
        except Exception, e:
            errormessage=str(e)
            print e.__class__
            raise nagiosplugin.CheckError("UnknownException: {0}".format(e))

        endTime = datetime.now()
        delta = endTime - startTime
        totalTime = delta.seconds + delta.microseconds/1000000.0
        yield nagiosplugin.Metric('totaltime', totalTime, uom='s' )


class TwillContext(nagiosplugin.ScalarContext):
    """ This is just a wrapper for consistency
    """



class TwillSummary(nagiosplugin.Summary):
    """ Take the results (in context) and summarize them into a text message
    """

    def ok(self, results):
        return 'All Steps Completed Successfully. Total Runtime: %s' % str(results['totaltime'])

    def problem(self, results):
        if results[0].hint =="Assertion Failure":
            self.state='CRITICAL'
        return results[0].hint

class TwillCheck(nagiosplugin.Check):
    """ This is just a wrapper for consistency
    """


@nagiosplugin.guarded
def main():
    helptext="""
        check_twill is a nagios-compatible monitoring plugin that is designed to be a 
        simple method to funtionally test websites. Please see http://twill.idyll.org 
        for details on the twill language syntax.
        """

    parser = argparse.ArgumentParser(description=helptext, version=prog_version)

    parser.add_argument('-d', '--debug', action="store_true", default=False, help="Shows details for command-line debugging (may be truncated by monitoring software)'")
    parser.add_argument('-w', '--warn', action="store", default=0.0, help="How long (in seconds) to wait for a response before Warning")
    parser.add_argument('-c', '--crit', action="store", default=0.0, help="How long (in seconds) to wait for a response before going Critical")
    parser.add_argument('-t', '--timeout', action="store", default=30, help="How long to wait before timing out (default 30 seconds)")
    parser.add_argument('-n', '--never-fail', action="store_true", default=False, help="Continue on even if there are failures.")
    parser.add_argument("script")
    args = parser.parse_args()

    check = TwillCheck(
                TwillResource(args),
                TwillContext('totaltime',warning=args.warn, critical=args.crit, fmt_metric='{value} seconds'),
                TwillSummary())
    check.name='Twill Check'
    check.main(timeout=args.timeout)


if __name__ == '__main__':
    main()
